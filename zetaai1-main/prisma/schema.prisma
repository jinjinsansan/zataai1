generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subscription Subscription?
  payments     Payment[]
  chatLogs     ChatLog[]
  
  @@map("users")
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  status    String   // active, inactive, trial, canceled
  trialEnd  DateTime?
  currentPeriodEnd DateTime?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  amount    Int      // 金額（円単位）
  currency  String   @default("jpy")
  status    String   // succeeded, failed, pending
  stripePaymentIntentId String?
  description String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String
  question  String
  answer    String   @db.Text
  raceId    String?
  metadata  Json?    // 追加情報（Function Call結果等）
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_logs")
}